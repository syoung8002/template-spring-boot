forEach: View
fileName: {{namePascalCase}}Chart.vue
path: frontend/src/components
---
<template>
    <div>
        <apexchart 
                v-if="isView"
                width="1000" 
                :type="type" 
                :options="options" 
                :series="series"
        ></apexchart>
    </div>
</template>

<script>
    import VueApexCharts from 'vue-apexcharts';
    const axios = require('axios').default;

    export default {
        name: '{{namePascalCase}}Chart',
        components: {
            'apexchart': VueApexCharts,
        },
        props: {
            value: Object
        },
        data: () => ({
            {{nameCamelCase}} : [],
            type: "{{options.ui.chart.type}}",
            options: {
                chart: {
                    id: "{{nameCamelCase}}-{{options.ui.nameCamelCase}}"
                },
                xaxis: {
                    categories: []
                }
            },
            series: [
                {
                    name: "{{options.ui.chart.fieldMapping.data}}",
                    data: []
                }
            ],
        }),
        computed: {
            isView() {
                if (this.options.xaxis.categories.length > 0 || this.series[0].data.length > 0) {
                    return true;
                }
                return false;
            },
        },
        async created() {
            var temp = await axios.get(axios.fixUrl('/{{namePlural}}'));

            temp.data._embedded.{{namePlural}}.map(obj => obj.id=obj._links.self.href.split("/")[obj._links.self.href.split("/").length - 1]);

            this.{{nameCamelCase}} = temp.data._embedded.{{namePlural}};
            {{#options.ui}}
            const categories = {{#setFieldMapping chart.fieldMapping.category}}{{/setFieldMapping}};
            const data = {{#setFieldMapping chart.fieldMapping.data}}{{/setFieldMapping}};

            if(this.{{../nameCamelCase}} && this.{{../nameCamelCase}}.length > 0) {
                this.{{../nameCamelCase}}.forEach((item) => {
                    if (item) {
                        if (categories && categories.length > 0) {
                            categories.forEach((category) => {
                                if (item[category]) {
                                    this.options.xaxis.categories.push(item[category]);
                                }
                            })
                        }
                        if (data && data.length > 0) {
                            data.forEach((val) => {
                                if (item[val]) {
                                    this.series[0].data.push(item[data]);
                                }
                            })
                        }
                    }
                });
            }
            {{/options.ui}}
        },
        methods: {
        }
    }
</script>


<function>
    let ui = this.attached.find((ele) => ele._type.includes("UI"));
    options.ui = ui;

    window.$HandleBars.registerHelper('setFieldMapping', function (fields) {
        let text = "[ ";
        if (fields && fields.length > 0) {
            fields.forEach((field, index) => {
                text += `"${field}"`;
                if (index < fields.length-1) {
                    text += ", "
                }
            })
        }
        text += " ]";
        return text;
    })

    window.$HandleBars.registerHelper('toURL', function (className) {

        var pluralize = function(value, revert) {

            var plural = {
                '(quiz)$'               : "$1zes",
                '^(ox)$'                : "$1en",
                '([m|l])ouse$'          : "$1ice",
                '(matr|vert|ind)ix|ex$' : "$1ices",
                '(x|ch|ss|sh)$'         : "$1es",
                '([^aeiouy]|qu)y$'      : "$1ies",
                '(hive)$'               : "$1s",
                '(?:([^f])fe|([lr])f)$' : "$1$2ves",
                '(shea|lea|loa|thie)f$' : "$1ves",
                'sis$'                  : "ses",
                '([ti])um$'             : "$1a",
                '(tomat|potat|ech|her|vet)o$': "$1oes",
                '(bu)s$'                : "$1ses",
                '(alias)$'              : "$1es",
                '(octop)us$'            : "$1i",
                '(ax|test)is$'          : "$1es",
                '(us)$'                 : "$1es",
                '([^s]+)$'              : "$1s"
            };

            var singular = {
                '(quiz)zes$'             : "$1",
                '(matr)ices$'            : "$1ix",
                '(vert|ind)ices$'        : "$1ex",
                '^(ox)en$'               : "$1",
                '(alias)es$'             : "$1",
                '(octop|vir)i$'          : "$1us",
                '(cris|ax|test)es$'      : "$1is",
                '(shoe)s$'               : "$1",
                '(o)es$'                 : "$1",
                '(bus)es$'               : "$1",
                '([m|l])ice$'            : "$1ouse",
                '(x|ch|ss|sh)es$'        : "$1",
                '(m)ovies$'              : "$1ovie",
                '(s)eries$'              : "$1eries",
                '([^aeiouy]|qu)ies$'     : "$1y",
                '([lr])ves$'             : "$1f",
                '(tive)s$'               : "$1",
                '(hive)s$'               : "$1",
                '(li|wi|kni)ves$'        : "$1fe",
                '(shea|loa|lea|thie)ves$': "$1f",
                '(^analy)ses$'           : "$1sis",
                '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$': "$1$2sis",        
                '([ti])a$'               : "$1um",
                '(n)ews$'                : "$1ews",
                '(h|bl)ouses$'           : "$1ouse",
                '(corpse)s$'             : "$1",
                '(us)es$'                : "$1",
                's$'                     : ""
            };

            var irregular = {
                'move'   : 'moves',
                'foot'   : 'feet',
                'goose'  : 'geese',
                'sex'    : 'sexes',
                'child'  : 'children',
                'man'    : 'men',
                'tooth'  : 'teeth',
                'person' : 'people',
                'index'  : 'indexes'
            };

            var uncountable = [
                'sheep', 
                'fish',
                'deer',
                'moose',
                'series',
                'species',
                'money',
                'rice',
                'information',
                'equipment'
            ];

            // save some time in the case that singular and plural are the same
            //console.log("value = " + value)
            if(uncountable.indexOf(value.toLowerCase()) >= 0) {
                return this;
            }

            // check for irregular forms
            for(var word in irregular) {
                if(revert) {
                    var pattern = new RegExp(irregular[word]+'$', 'i');
                    var replace = word;
                } else {
                    var pattern = new RegExp(word+'$', 'i');
                    var replace = irregular[word];
                }
                if(pattern.test(value)) {
                    return value.replace(pattern, replace);
                }
            }

            if(revert) {
                var array = singular;
            } else {
                var array = plural;
            }

            // check for matches using regular expressions
            for(var reg in array) {
                var pattern = new RegExp(reg, 'i');

                if(pattern.test(value)) {
                    return value.replace(pattern, array[reg]);
                }
            }

            return value;
        }

        return pluralize(className.toLowerCase());
    })

</function>